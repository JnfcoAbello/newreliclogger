{"version":3,"file":"relic-logger.umd.js","sources":["../../../projects/relic-logger/src/lib/relic-logger.service.ts","../../../projects/relic-logger/src/lib/relic-logger.component.ts","../../../projects/relic-logger/src/lib/relic-logger.module.ts","../../../projects/relic-logger/src/public-api.ts","../../../projects/relic-logger/src/relic-logger.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelicLoggerService {\n\n  constructor(private http: HttpClient) { }\n\n  public newRelicTest (message: string,appSection: string,workspaceID : string, uuid: string): Observable<any> {\n    const date = Date.now();\n    //const workspaceID = this.userSession.workspaceID\n    const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-License-Key': 'f5bd14bc79965831342752df36088696FFFFNRAL'\n    });\n    const msg = message.length > 255 ? message.substring(0,255) : message;\n    const body = {\n        \"channel\": \"DEV\",\n        \"datetime.date\": new Date(date).toDateString(),\n        \"datetime.timezone\": \"UTC\",\n        \"datetime.timezone_type\": 3,\n        \"message\": msg,\n        \"timestamp\": date,\n        \"device_uuid\": uuid,\n        \"workspace_uuid\": workspaceID,\n        \"app_section\": appSection,\n        \"app\": \"app_retail\"\n\n    }\n    console.log(\"BODY: \",body);\n    return this.http.post('https://log-api.newrelic.com/log/v1',body,{ headers });\n}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { RelicLoggerService } from './relic-logger.service';\n\n@Component({\n  selector: 'lib-relic-logger',\n  template: `\n    <p>\n      relic-logger works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class RelicLoggerComponent implements OnInit {\n\n  constructor(private svc: RelicLoggerService) { }\n\n  ngOnInit(): void {\n    this.svc.newRelicTest(\"message test\",\"plugin section\",\"vghhcvujk65jj\",\"gddgddfgfcbb\").subscribe( data => {\n      console.log(\"data: \" + data);\n    })\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RelicLoggerComponent } from './relic-logger.component';\n\n\n\n@NgModule({\n  declarations: [\n    RelicLoggerComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    RelicLoggerComponent\n  ]\n})\nexport class RelicLoggerModule { }\n","/*\n * Public API Surface of relic-logger\n */\n\nexport * from './lib/relic-logger.service';\nexport * from './lib/relic-logger.component';\nexport * from './lib/relic-logger.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["HttpHeaders","Injectable","HttpClient","Component","NgModule"],"mappings":";;;;;;;QASE,4BAAoB,IAAgB;YAAhB,SAAI,GAAJ,IAAI,CAAY;SAAK;QAElC,yCAAY,GAAZ,UAAc,OAAe,EAAC,UAAkB,EAAC,WAAoB,EAAE,IAAY;YACxF,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;;YAExB,IAAM,OAAO,GAAG,IAAIA,cAAW,CAAC;gBAC5B,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,0CAA0C;aAC9D,CAAC,CAAC;YACH,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAC,GAAG,CAAC,GAAG,OAAO,CAAC;YACtE,IAAM,IAAI,GAAG;gBACT,SAAS,EAAE,KAAK;gBAChB,eAAe,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE;gBAC9C,mBAAmB,EAAE,KAAK;gBAC1B,wBAAwB,EAAE,CAAC;gBAC3B,SAAS,EAAE,GAAG;gBACd,WAAW,EAAE,IAAI;gBACjB,aAAa,EAAE,IAAI;gBACnB,gBAAgB,EAAE,WAAW;gBAC7B,aAAa,EAAE,UAAU;gBACzB,KAAK,EAAE,YAAY;aAEtB,CAAA;YACD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;YAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAC,IAAI,EAAC,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;SACjF;;;;;gBA9BAC,aAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;gBAJQC,aAAU;;;;QCajB,8BAAoB,GAAuB;YAAvB,QAAG,GAAH,GAAG,CAAoB;SAAK;QAEhD,uCAAQ,GAAR;YACE,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,cAAc,EAAC,gBAAgB,EAAC,eAAe,EAAC,cAAc,CAAC,CAAC,SAAS,CAAE,UAAA,IAAI;gBACnG,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;aAC9B,CAAC,CAAA;SACH;;;;gBAlBFC,YAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,oDAIT;iBAGF;;;gBAXQ,kBAAkB;;;;QCc3B;;;;;gBAVCC,WAAQ,SAAC;oBACR,YAAY,EAAE;wBACZ,oBAAoB;qBACrB;oBACD,OAAO,EAAE,EACR;oBACD,OAAO,EAAE;wBACP,oBAAoB;qBACrB;iBACF;;;ICdD;;;;ICAA;;;;;;;;;;;;;;"}